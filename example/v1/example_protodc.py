
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.example_pb2


class ExampleWatOneof(enum.Enum): 
    NONE = 0
    javascript = 1
    golang = 2
    another_example = 3



@dataclass
class Example:
    life_the_universe_and_everything: int = 0 
    examples: list['Example'] = field(default_factory=list) 
    which_wat: ExampleWatOneof = ExampleWatOneof.NONE
    wat: Union[None, 'str', 'str', 'Example'] = None
    time: Optional[datetime] = None 
    
    def __post_init__(self):
        if self.wat is not None and self.which_wat in (None, ExampleWatOneof.NONE):
            raise Exception('example.v1.Example: which_wat not passed in constructor')
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.example_pb2.Example()
        google.protobuf.json_format.Parse(json_str, pb)
        return Example.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.example_pb2.Example':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Example: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.example_pb2.Example()
    
        if self.life_the_universe_and_everything is not None: 
            pb.life_the_universe_and_everything = self.life_the_universe_and_everything 
        if self.examples is not None: 
            for x in self.examples: 
                x.to_protobuf(target_pb=pb.examples.add(), depth=depth+1) 
        if self.which_wat is None or self.which_wat == ExampleWatOneof.NONE:
            pass
        elif self.which_wat == ExampleWatOneof.javascript: 
            pb.javascript = self.wat
        elif self.which_wat == ExampleWatOneof.golang: 
            pb.golang = self.wat
        elif self.which_wat == ExampleWatOneof.another_example: 
            self.wat.to_protobuf(target_pb=pb.another_example, depth=depth+1)
        else:
            raise Exception('to_protobuf(): unexpected value for example.v1.Example.wat')
        
        if self.time is not None: 
            pb.time.FromDatetime(self.time) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.example_pb2.Example', depth: int = 0) -> 'Example':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Example: often caused by a circular reference.')
    
        dc = Example()
    
        dc.life_the_universe_and_everything = pb.life_the_universe_and_everything
        dc.examples = [Example.from_protobuf(x, depth=depth+1) for x in pb.examples]
        oneof_field_name = pb.WhichOneof('wat')
        if oneof_field_name is None:
            pass
        elif oneof_field_name == 'javascript':
            dc.which_wat = ExampleWatOneof.javascript
            dc.wat = pb.javascript
        elif oneof_field_name == 'golang':
            dc.which_wat = ExampleWatOneof.golang
            dc.wat = pb.golang
        elif oneof_field_name == 'another_example':
            dc.which_wat = ExampleWatOneof.another_example
            dc.wat = Example.from_protobuf(pb.another_example, depth+1)
        else:
            raise Exception('from_protobuf(): unexpected value for example.v1.Example.wat')
        
        if pb.HasField('time'): 
            dc.time = pb.time.ToDatetime() 
        
        return dc
    
    @property
    def javascript(self) -> Optional['str']: 
        if self.which_wat == ExampleWatOneof.javascript: 
            return self.wat
        else:
            return None
    
    @javascript.setter
    def javascript(self, value: 'str'): 
        self.which_wat = ExampleWatOneof.javascript
        self.wat = value
    
    @property
    def golang(self) -> Optional['str']: 
        if self.which_wat == ExampleWatOneof.golang: 
            return self.wat
        else:
            return None
    
    @golang.setter
    def golang(self, value: 'str'): 
        self.which_wat = ExampleWatOneof.golang
        self.wat = value
    
    @property
    def another_example(self) -> Optional['Example']: 
        if self.which_wat == ExampleWatOneof.another_example: 
            return self.wat
        else:
            return None
    
    @another_example.setter
    def another_example(self, value: 'Example'): 
        self.which_wat = ExampleWatOneof.another_example
        self.wat = value
    
