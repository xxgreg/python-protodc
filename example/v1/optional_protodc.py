
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.optional_pb2


class Wat4(enum.Enum):
    WAT4_UNSPECIFIED = 0
    WAT4_WAT = 1



@dataclass
class OptionalMsg:
    opt_int: Optional[int] = None 
    opt_enum: 'Optional[Wat4]' = None 
    opt_thing: Optional['Thing4'] = None 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.optional_pb2.OptionalMsg()
        google.protobuf.json_format.Parse(json_str, pb)
        return OptionalMsg.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.optional_pb2.OptionalMsg':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.OptionalMsg: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.optional_pb2.OptionalMsg()
    
        if self.opt_int is not None: 
            pb.opt_int = self.opt_int 
        if self.opt_enum is not None: 
            pb.opt_enum = self.opt_enum.value 
        if self.opt_thing is not None: 
             self.opt_thing.to_protobuf(target_pb=pb.opt_thing, depth=depth+1) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.optional_pb2.OptionalMsg', depth: int = 0) -> 'OptionalMsg':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.OptionalMsg: often caused by a circular reference.')
    
        dc = OptionalMsg()
    
        if pb.HasField('opt_int'):
            dc.opt_int = pb.opt_int
        if pb.HasField('opt_enum'): 
            dc.opt_enum = Wat4(pb.opt_enum) 
        if pb.HasField('opt_thing'): 
            dc.opt_thing = Thing4.from_protobuf(pb.opt_thing, depth=depth+1) 
        
        return dc
    

@dataclass
class Thing4:
    wat: int = 0 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.optional_pb2.Thing4()
        google.protobuf.json_format.Parse(json_str, pb)
        return Thing4.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.optional_pb2.Thing4':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Thing4: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.optional_pb2.Thing4()
    
        if self.wat is not None: 
            pb.wat = self.wat 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.optional_pb2.Thing4', depth: int = 0) -> 'Thing4':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Thing4: often caused by a circular reference.')
    
        dc = Thing4()
    
        dc.wat = pb.wat
        
        return dc
    
