
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.singular_pb2


class Wat3(enum.Enum):
    WAT3_UNSPECIFIED = 0
    WAT3_WAT = 1



@dataclass
class Singular:
    the_str: str = "" 
    the_int: int = 0 
    the_double: float = 0.0 
    the_enum: 'Wat3' = Wat3(0) 
    the_msg: Optional['Thing3'] = None 
    the_null: None = None 
    the_timestamp: Optional[datetime] = None 
    the_wrapper: Optional[Optional[bool]] = None 
    the_struct: Optional[dict[str,Any]] = None 
    the_any: Any = None 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.singular_pb2.Singular()
        google.protobuf.json_format.Parse(json_str, pb)
        return Singular.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.singular_pb2.Singular':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Singular: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.singular_pb2.Singular()
    
        if self.the_str is not None: 
            pb.the_str = self.the_str 
        if self.the_int is not None: 
            pb.the_int = self.the_int 
        if self.the_double is not None: 
            pb.the_double = self.the_double 
        if self.the_enum is not None: 
            pb.the_enum = self.the_enum.value 
        if self.the_msg is not None: 
             self.the_msg.to_protobuf(target_pb=pb.the_msg, depth=depth+1) 
        if self.the_timestamp is not None: 
            pb.the_timestamp.FromDatetime(self.the_timestamp) 
        if self.the_wrapper is not None: 
             pb.the_wrapper.value = self.the_wrapper 
        if self.the_struct is not None: 
            google.protobuf.json_format.ParseDict(self.the_struct, pb.the_struct) 
        if self.the_any is not None: 
            protodc.pack_any(self.the_any, pb.the_any, depth+1) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.singular_pb2.Singular', depth: int = 0) -> 'Singular':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Singular: often caused by a circular reference.')
    
        dc = Singular()
    
        dc.the_str = pb.the_str
        dc.the_int = pb.the_int
        dc.the_double = pb.the_double
        dc.the_enum = Wat3(pb.the_enum) 
        if pb.HasField('the_msg'): 
            dc.the_msg = Thing3.from_protobuf(pb.the_msg, depth=depth+1) 
        if pb.HasField('the_timestamp'): 
            dc.the_timestamp = pb.the_timestamp.ToDatetime() 
        if pb.HasField('the_wrapper'): 
            dc.the_wrapper = pb.the_wrapper.value 
        if pb.HasField('the_struct'): 
            dc.the_struct = google.protobuf.json_format.MessageToDict(pb.the_struct) 
        if pb.HasField('the_any'): 
            dc.the_any = protodc.unpack_any(pb.the_any, depth+1) 
        
        return dc
    

@dataclass
class Thing3:
    wat: int = 0 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.singular_pb2.Thing3()
        google.protobuf.json_format.Parse(json_str, pb)
        return Thing3.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.singular_pb2.Thing3':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Thing3: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.singular_pb2.Thing3()
    
        if self.wat is not None: 
            pb.wat = self.wat 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.singular_pb2.Thing3', depth: int = 0) -> 'Thing3':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Thing3: often caused by a circular reference.')
    
        dc = Thing3()
    
        dc.wat = pb.wat
        
        return dc
    
