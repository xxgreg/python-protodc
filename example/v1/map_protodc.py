
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.map_pb2


class Wat2(enum.Enum):
    WAT2_UNSPECIFIED = 0
    WAT2_WAT = 1



@dataclass
class Map:
    str_by_str: dict[str, 'str'] = field(default_factory=dict)
    str_by_int: dict[int, 'str'] = field(default_factory=dict)
    enum_by_str: dict[str, 'Wat2'] = field(default_factory=dict)
    msg_by_str: dict[str, 'Thing2'] = field(default_factory=dict)
    timestamp_by_str: dict[str, datetime] = field(default_factory=dict)
    wrapped_int_by_str: dict[str, 'int'] = field(default_factory=dict)
    struct_by_str: dict[str, 'dict[str,Any]'] = field(default_factory=dict)
    any_by_str: dict[str, 'Any'] = field(default_factory=dict)
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.map_pb2.Map()
        google.protobuf.json_format.Parse(json_str, pb)
        return Map.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.map_pb2.Map':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Map: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.map_pb2.Map()
    
        if self.str_by_str is not None: 
            pb.str_by_str.update(self.str_by_str) 
        if self.str_by_int is not None: 
            pb.str_by_int.update(self.str_by_int) 
        if self.enum_by_str is not None:
            for (k, v) in self.enum_by_str.items():
                pb.enum_by_str[k] = v.value
        if self.msg_by_str is not None: 
            for (k, v) in self.msg_by_str.items(): 
                v.to_protobuf(target_pb=pb.msg_by_str.get_or_create(k), depth=depth+1) 
        if self.timestamp_by_str is not None:
            for (k, v) in self.timestamp_by_str.items():
                pb.timestamp_by_str[k].FromDatetime(v)
        if self.wrapped_int_by_str is not None:
            for (k, v) in self.wrapped_int_by_str.items():
                pb.wrapped_int_by_str[k].value = v
        if self.struct_by_str is not None: 
            for (k, v) in self.struct_by_str.items():
                google.protobuf.json_format.ParseDict(v, pb.struct_by_str[k])
        if self.any_by_str is not None: 
            for (k, v) in self.any_by_str.items(): 
                protodc.pack_any(v, pb.any_by_str.get_or_create(k), depth+1) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.map_pb2.Map', depth: int = 0) -> 'Map':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Map: often caused by a circular reference.')
    
        dc = Map()
    
        dc.str_by_str = {k: v for (k, v) in pb.str_by_str.items()} 
        dc.str_by_int = {k: v for (k, v) in pb.str_by_int.items()} 
        dc.enum_by_str = {k: Wat2(v) for (k, v) in pb.enum_by_str.items()}
        dc.msg_by_str = {k: Thing2.from_protobuf(v, depth=depth+1) for (k, v) in pb.msg_by_str.items()}
        dc.timestamp_by_str = {k: v.ToDatetime() for (k, v) in pb.timestamp_by_str.items()}
        dc.wrapped_int_by_str = {k: int(v.value) for (k, v) in pb.wrapped_int_by_str.items()}
        dc.struct_by_str = {k: google.protobuf.json_format.MessageToDict(v) for (k, v) in pb.struct_by_str.items()}
        dc.any_by_str = {k: protodc.unpack_any(v, depth=depth+1) for (k, v) in pb.any_by_str.items()}
        
        return dc
    

@dataclass
class Thing2:
    wat: int = 0 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.map_pb2.Thing2()
        google.protobuf.json_format.Parse(json_str, pb)
        return Thing2.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.map_pb2.Thing2':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Thing2: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.map_pb2.Thing2()
    
        if self.wat is not None: 
            pb.wat = self.wat 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.map_pb2.Thing2', depth: int = 0) -> 'Thing2':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Thing2: often caused by a circular reference.')
    
        dc = Thing2()
    
        dc.wat = pb.wat
        
        return dc
    
