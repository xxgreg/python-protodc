
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.simple_pb2
import example.other.v1.other_protodc


class Bar(enum.Enum):
    BAR_UNSPECIFIED = 0
    BAR_WAT = 1



@dataclass
class Foo:
    this_other: Optional['example.other.v1.other_protodc.Other'] = None 
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.simple_pb2.Foo':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Foo: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.simple_pb2.Foo()
    
        if self.this_other is not None: 
             self.this_other.to_protobuf(target_pb=pb.this_other, depth=depth+1) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.simple_pb2.Foo', depth: int = 0) -> 'Foo':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Foo: often caused by a circular reference.')
    
        dc = Foo()
    
        if pb.HasField('this_other'): 
            dc.this_other = example.other.v1.other_protodc.Other.from_protobuf(pb.this_other, depth=depth+1) 
        
        return dc
    
