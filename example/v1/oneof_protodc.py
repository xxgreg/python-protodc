
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.oneof_pb2


class Wat5(enum.Enum):
    WAT5_UNSPECIFIED = 0
    WAT5_WAT = 1


class OneofOneStuffOneof(enum.Enum): 
    NONE = 0
    int_stuff = 1


class OneofAllStuffOneof(enum.Enum): 
    NONE = 0
    more_int = 1
    and_more_int = 2
    wat = 3
    thing = 4
    the_timestamp = 5
    the_wrapper = 6
    the_struct = 7
    the_any = 8



@dataclass
class Oneof:
    which_one_stuff: OneofOneStuffOneof = OneofOneStuffOneof.NONE
    one_stuff: Union[None, 'int'] = None
    which_all_stuff: OneofAllStuffOneof = OneofAllStuffOneof.NONE
    all_stuff: Union[None, 'int', 'int', 'Wat5', 'Thing5', 'google.protobuf.timestamp_pb2.Timestamp', 'bool', 'dict[str,Any]', 'Any'] = None
    
    def __post_init__(self):
        if self.one_stuff is not None and self.which_one_stuff in (None, OneofOneStuffOneof.NONE):
            raise Exception('example.v1.Oneof: which_one_stuff not passed in constructor')
    
        if self.all_stuff is not None and self.which_all_stuff in (None, OneofAllStuffOneof.NONE):
            raise Exception('example.v1.Oneof: which_all_stuff not passed in constructor')
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.oneof_pb2.Oneof()
        google.protobuf.json_format.Parse(json_str, pb)
        return Oneof.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.oneof_pb2.Oneof':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Oneof: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.oneof_pb2.Oneof()
    
        if self.which_one_stuff is None or self.which_one_stuff == OneofOneStuffOneof.NONE:
            pass
        elif self.which_one_stuff == OneofOneStuffOneof.int_stuff: 
            pb.int_stuff = self.one_stuff
        else:
            raise Exception('to_protobuf(): unexpected value for example.v1.Oneof.one_stuff')
        
        if self.which_all_stuff is None or self.which_all_stuff == OneofAllStuffOneof.NONE:
            pass
        elif self.which_all_stuff == OneofAllStuffOneof.more_int: 
            pb.more_int = self.all_stuff
        elif self.which_all_stuff == OneofAllStuffOneof.and_more_int: 
            pb.and_more_int = self.all_stuff
        elif self.which_all_stuff == OneofAllStuffOneof.wat: 
            pb.wat = self.all_stuff.value
        elif self.which_all_stuff == OneofAllStuffOneof.thing: 
            self.all_stuff.to_protobuf(target_pb=pb.thing, depth=depth+1)
        elif self.which_all_stuff == OneofAllStuffOneof.the_timestamp: 
            pb.the_timestamp.FromDatetime(self.all_stuff)
        elif self.which_all_stuff == OneofAllStuffOneof.the_wrapper: 
            pb.the_wrapper.value = self.all_stuff
        elif self.which_all_stuff == OneofAllStuffOneof.the_struct: 
            google.protobuf.json_format.ParseDict(self.all_stuff, pb.the_struct)
        elif self.which_all_stuff == OneofAllStuffOneof.the_any: 
            protodc.pack_any(self.all_stuff, pb.the_any, depth+1)
        else:
            raise Exception('to_protobuf(): unexpected value for example.v1.Oneof.all_stuff')
        
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.oneof_pb2.Oneof', depth: int = 0) -> 'Oneof':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Oneof: often caused by a circular reference.')
    
        dc = Oneof()
    
        oneof_field_name = pb.WhichOneof('one_stuff')
        if oneof_field_name is None:
            pass
        elif oneof_field_name == 'int_stuff':
            dc.which_one_stuff = OneofOneStuffOneof.int_stuff
            dc.one_stuff = pb.int_stuff
        else:
            raise Exception('from_protobuf(): unexpected value for example.v1.Oneof.one_stuff')
        
        oneof_field_name = pb.WhichOneof('all_stuff')
        if oneof_field_name is None:
            pass
        elif oneof_field_name == 'more_int':
            dc.which_all_stuff = OneofAllStuffOneof.more_int
            dc.all_stuff = pb.more_int
        elif oneof_field_name == 'and_more_int':
            dc.which_all_stuff = OneofAllStuffOneof.and_more_int
            dc.all_stuff = pb.and_more_int
        elif oneof_field_name == 'wat':
            dc.which_all_stuff = OneofAllStuffOneof.wat
            dc.all_stuff = Wat5(pb.wat)
        elif oneof_field_name == 'thing':
            dc.which_all_stuff = OneofAllStuffOneof.thing
            dc.all_stuff = Thing5.from_protobuf(pb.thing, depth+1)
        elif oneof_field_name == 'the_timestamp':
            dc.which_all_stuff = OneofAllStuffOneof.the_timestamp
            dc.all_stuff = pb.the_timestamp.ToDatetime()
        elif oneof_field_name == 'the_wrapper':
            dc.which_all_stuff = OneofAllStuffOneof.the_wrapper
            dc.all_stuff = pb.the_wrapper.value
        elif oneof_field_name == 'the_struct':
            dc.which_all_stuff = OneofAllStuffOneof.the_struct
            dc.all_stuff = google.protobuf.json_format.MessageToDict(pb.the_struct)
        elif oneof_field_name == 'the_any':
            dc.which_all_stuff = OneofAllStuffOneof.the_any
            dc.all_stuff = protodc.unpack_any(pb.the_any, depth=depth+1)
        else:
            raise Exception('from_protobuf(): unexpected value for example.v1.Oneof.all_stuff')
        
        
        return dc
    
    @property
    def int_stuff(self) -> Optional['int']: 
        if self.which_one_stuff == OneofOneStuffOneof.int_stuff: 
            return self.one_stuff
        else:
            return None
    
    @int_stuff.setter
    def int_stuff(self, value: 'int'): 
        self.which_one_stuff = OneofOneStuffOneof.int_stuff
        self.one_stuff = value
    
    @property
    def more_int(self) -> Optional['int']: 
        if self.which_all_stuff == OneofAllStuffOneof.more_int: 
            return self.all_stuff
        else:
            return None
    
    @more_int.setter
    def more_int(self, value: 'int'): 
        self.which_all_stuff = OneofAllStuffOneof.more_int
        self.all_stuff = value
    
    @property
    def and_more_int(self) -> Optional['int']: 
        if self.which_all_stuff == OneofAllStuffOneof.and_more_int: 
            return self.all_stuff
        else:
            return None
    
    @and_more_int.setter
    def and_more_int(self, value: 'int'): 
        self.which_all_stuff = OneofAllStuffOneof.and_more_int
        self.all_stuff = value
    
    @property
    def wat(self) -> Optional['Wat5']: 
        if self.which_all_stuff == OneofAllStuffOneof.wat: 
            return self.all_stuff
        else:
            return None
    
    @wat.setter
    def wat(self, value: 'Wat5'): 
        self.which_all_stuff = OneofAllStuffOneof.wat
        self.all_stuff = value
    
    @property
    def thing(self) -> Optional['Thing5']: 
        if self.which_all_stuff == OneofAllStuffOneof.thing: 
            return self.all_stuff
        else:
            return None
    
    @thing.setter
    def thing(self, value: 'Thing5'): 
        self.which_all_stuff = OneofAllStuffOneof.thing
        self.all_stuff = value
    
    @property
    def the_timestamp(self) -> Optional['google.protobuf.timestamp_pb2.Timestamp']: 
        if self.which_all_stuff == OneofAllStuffOneof.the_timestamp: 
            return self.all_stuff
        else:
            return None
    
    @the_timestamp.setter
    def the_timestamp(self, value: 'google.protobuf.timestamp_pb2.Timestamp'): 
        self.which_all_stuff = OneofAllStuffOneof.the_timestamp
        self.all_stuff = value
    
    @property
    def the_wrapper(self) -> Optional['bool']: 
        if self.which_all_stuff == OneofAllStuffOneof.the_wrapper: 
            return self.all_stuff
        else:
            return None
    
    @the_wrapper.setter
    def the_wrapper(self, value: 'bool'): 
        self.which_all_stuff = OneofAllStuffOneof.the_wrapper
        self.all_stuff = value
    
    @property
    def the_struct(self) -> Optional['dict[str,Any]']: 
        if self.which_all_stuff == OneofAllStuffOneof.the_struct: 
            return self.all_stuff
        else:
            return None
    
    @the_struct.setter
    def the_struct(self, value: 'dict[str,Any]'): 
        self.which_all_stuff = OneofAllStuffOneof.the_struct
        self.all_stuff = value
    
    @property
    def the_any(self) -> Optional['Any']: 
        if self.which_all_stuff == OneofAllStuffOneof.the_any: 
            return self.all_stuff
        else:
            return None
    
    @the_any.setter
    def the_any(self, value: 'Any'): 
        self.which_all_stuff = OneofAllStuffOneof.the_any
        self.all_stuff = value
    

@dataclass
class Thing5:
    wat: int = 0 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.oneof_pb2.Thing5()
        google.protobuf.json_format.Parse(json_str, pb)
        return Thing5.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.oneof_pb2.Thing5':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Thing5: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.oneof_pb2.Thing5()
    
        if self.wat is not None: 
            pb.wat = self.wat 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.oneof_pb2.Thing5', depth: int = 0) -> 'Thing5':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Thing5: often caused by a circular reference.')
    
        dc = Thing5()
    
        dc.wat = pb.wat
        
        return dc
    
