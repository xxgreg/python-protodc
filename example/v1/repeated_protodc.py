
# autogenerated by protoc-gen-python-protodc

from dataclasses import dataclass, field
from datetime import datetime
import enum
from typing import Any, Union, Optional

import google.protobuf.message
import google.protobuf.json_format

import protodc


import example.v1.repeated_pb2


class Wat(enum.Enum):
    WAT_UNSPECIFIED = 0
    WAT_WAT = 1



@dataclass
class Repeated:
    the_int: list[int] = field(default_factory=list) 
    the_enums: list['Wat'] = field(default_factory=list) 
    the_msg: list['Thing'] = field(default_factory=list) 
    the_timestamps: list[datetime] = field(default_factory=list)
    the_anys: list[Any] = field(default_factory=list)
    the_strs: list[Optional[str]] = field(default_factory=list)
    the_structs: list[Optional[dict[str,Any]]] = field(default_factory=list)
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.repeated_pb2.Repeated()
        google.protobuf.json_format.Parse(json_str, pb)
        return Repeated.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.repeated_pb2.Repeated':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Repeated: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.repeated_pb2.Repeated()
    
        if self.the_int is not None: 
            pb.the_int.extend(self.the_int) 
        if self.the_enums is not None: 
            pb.the_enums.extend([x.value for x in self.the_enums]) 
        if self.the_msg is not None: 
            for x in self.the_msg: 
                x.to_protobuf(target_pb=pb.the_msg.add(), depth=depth+1) 
        if self.the_timestamps is not None:
            for x in self.the_timestamps:
                pb.the_timestamps.add().FromDatetime(x)
        if self.the_anys is not None:
            for x in self.the_anys:
                protodc.pack_any(x, pb.the_anys.add(), depth+1) 
        if self.the_strs is not None: 
            for x in self.the_strs: 
                pb.the_strs.add().value = x 
        if self.the_structs is not None: 
            for x in self.the_structs: 
                google.protobuf.json_format.ParseDict(x, pb.the_structs.add()) 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.repeated_pb2.Repeated', depth: int = 0) -> 'Repeated':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Repeated: often caused by a circular reference.')
    
        dc = Repeated()
    
        dc.the_int = [x for x in pb.the_int] 
        dc.the_enums = [Wat(x) for x in pb.the_enums] 
        dc.the_msg = [Thing.from_protobuf(x, depth=depth+1) for x in pb.the_msg]
        dc.the_timestamps = [x.ToDatetime() for x in pb.the_timestamps]
        dc.the_anys = [protodc.unpack_any(x, depth=depth+1) for x in pb.the_anys]
        dc.the_strs = [x.value for x in pb.the_strs]
        dc.the_structs = [google.protobuf.json_format.MessageToDict(x) for x in pb.the_structs]
        
        return dc
    

@dataclass
class Thing:
    wat: int = 0 
    
    def to_protojson(self):
        return google.protobuf.json_format.MessageToJson(self.to_protobuf())
    
    @staticmethod
    def from_protojson(json_str):
        pb = example.v1.repeated_pb2.Thing()
        google.protobuf.json_format.Parse(json_str, pb)
        return Thing.from_protobuf(pb)
    
    def to_protobuf(self, target_pb: google.protobuf.message.Message = None, depth: int = 0) -> 'example.v1.repeated_pb2.Thing':
        if depth > 100:
            raise Exception('to_protobuf(): too much nesting in example.v1.Thing: often caused by a circular reference.')
    
        if target_pb is not None:
            pb = target_pb
        else:
            pb = example.v1.repeated_pb2.Thing()
    
        if self.wat is not None: 
            pb.wat = self.wat 
        
        return pb
    
    @staticmethod
    def from_protobuf(pb: 'example.v1.repeated_pb2.Thing', depth: int = 0) -> 'Thing':
        if depth > 100:
            raise Exception('from_protobuf(): too much nesting in example.v1.Thing: often caused by a circular reference.')
    
        dc = Thing()
    
        dc.wat = pb.wat
        
        return dc
    
